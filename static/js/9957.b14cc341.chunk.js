"use strict";(self.webpackChunkn2_trees=self.webpackChunkn2_trees||[]).push([[9957],{89957:(e,t,n)=>{n.r(t),n.d(t,{invokeGeometryOp:()=>s});var r=n(19902);function i(e,t){let n;return{loaded:!1,load:()=>n??=t().then(t=>{c[e]={loaded:!0,execute:t}})}}function a(e){return null==e?null:e.toJSON()}const c={disjoint:i("disjoint",()=>n.e(352).then(n.bind(n,80352)).then(e=>e.execute)),intersects:i("intersects",()=>n.e(5838).then(n.bind(n,95838)).then(e=>e.execute)),touches:i("touches",()=>n.e(6521).then(n.bind(n,66521)).then(e=>e.execute)),crosses:i("crosses",()=>n.e(6050).then(n.bind(n,56050)).then(e=>e.execute)),within:i("within",()=>n.e(1475).then(n.bind(n,51475)).then(e=>e.execute)),contains:i("contains",()=>n.e(7353).then(n.bind(n,27353)).then(e=>e.execute)),overlaps:i("overlaps",()=>n.e(4744).then(n.bind(n,34744)).then(e=>e.execute)),equals:i("equals",async()=>{const e=await n.e(2442).then(n.bind(n,72442));return(t,n)=>e.execute((0,r.rS)(t),(0,r.rS)(n))}),relate:i("relate",async()=>{const e=await n.e(6358).then(n.bind(n,16358));return(t,n,i)=>e.execute((0,r.rS)(t),(0,r.rS)(n),i)}),intersection:i("intersection",()=>n.e(3477).then(n.bind(n,33477)).then(e=>e.execute)),union:i("union",()=>n.e(8673).then(n.bind(n,8673)).then(e=>e.executeMany)),difference:i("difference",async()=>{const e=await n.e(7568).then(n.bind(n,27568));return(t,n)=>a(e.execute((0,r.rS)(t),(0,r.rS)(n)))}),symmetricDifference:i("symmetricDifference",async()=>{const e=await n.e(3083).then(n.bind(n,83083));return(t,n)=>a(e.execute((0,r.rS)(t),(0,r.rS)(n)))}),clip:i("clip",async()=>{const e=await n.e(265).then(n.bind(n,265));return(t,n)=>a(e.execute((0,r.rS)(t),(0,r.rS)(n)))}),cut:i("cut",async()=>{const e=await n.e(4855).then(n.bind(n,34855));return(t,n)=>e.execute((0,r.rS)(t),(0,r.rS)(n)).map(e=>a(e))}),area:i("area",async()=>{const e=await n.e(4866).then(n.bind(n,84866)),{convertFromSpatialReferenceUnit:t,toAreaUnit:i}=await n.e(1802).then(n.bind(n,41802));return(n,a)=>{const c=e.execute((0,r.rS)(n));return t(n.spatialReference,i(a),c)}}),geodeticArea:i("geodeticArea",async()=>{const e=await n.e(4392).then(n.bind(n,4392)),{convert:t,squareMeters:i,toAreaUnit:a}=await n.e(1802).then(n.bind(n,41802));return await e.load(),(n,c,s)=>{const o=e.execute((0,r.rS)(n),{curveType:s});return t(i,a(c),o)}}),length:i("length",async()=>{const e=await n.e(7644).then(n.bind(n,67644)),{convertFromSpatialReferenceUnit:t,toLengthUnit:r}=await n.e(1802).then(n.bind(n,41802));return(n,i)=>{const a=e.execute(n);return t(n.spatialReference,r(i),a)}}),geodeticLength:i("geodeticLength",async()=>{const e=await n.e(5925).then(n.bind(n,25925)),{convert:t,meters:i,toLengthUnit:a}=await n.e(1802).then(n.bind(n,41802));return await e.load(),(n,c,s)=>{const o=e.execute((0,r.rS)(n),{curveType:s});return t(i,a(c),o)}}),distance:i("distance",async()=>{const e=await n.e(5744).then(n.bind(n,55744)),{convertFromSpatialReferenceUnit:t,toLengthUnit:i}=await n.e(1802).then(n.bind(n,41802));return(n,a,c)=>{const s=e.execute((0,r.rS)(n),(0,r.rS)(a));return t(n.spatialReference,i(c),s)}}),densify:i("densify",async()=>{const e=await n.e(8609).then(n.bind(n,8609)),{convertToSpatialReferenceUnit:t,toLengthUnit:i}=await n.e(1802).then(n.bind(n,41802));return(n,c,s)=>(c=t(i(s),n.spatialReference,c),a(e.execute((0,r.rS)(n),c)))}),geodeticDensify:i("geodeticDensify",async()=>{const e=await n.e(1707).then(n.bind(n,51707)),{convert:t,meters:i,toLengthUnit:c}=await n.e(1802).then(n.bind(n,41802));return await e.load(),(n,s,o,u)=>(s=t(c(o),i,s),a(e.execute((0,r.rS)(n),s,{curveType:u})))}),generalize:i("generalize",async()=>{const e=await n.e(1373).then(n.bind(n,41373)),{convertToSpatialReferenceUnit:t,toLengthUnit:i}=await n.e(1802).then(n.bind(n,41802));return(n,c,s,o)=>(c=t(i(s),n.spatialReference,c),a(e.execute((0,r.rS)(n),c,o)))}),buffer:i("buffer",async()=>{const e=await Promise.all([n.e(5766),n.e(5238)]).then(n.bind(n,65238)),{convertToSpatialReferenceUnit:t,toLengthUnit:r}=await n.e(1802).then(n.bind(n,41802));return(n,i,a)=>(i=t(r(a),n.spatialReference,i),e.execute(n,i))}),geodesicBuffer:i("geodesicBuffer",async()=>{const e=await n.e(3749).then(n.bind(n,33749)),{convert:t,meters:r,toLengthUnit:i}=await n.e(1802).then(n.bind(n,41802));return await e.load(),(n,a,c,s)=>(a=t(i(c),r,a),e.execute(n,a,{curveType:s}))}),offset:i("offset",async()=>{const{executeOffsetJson:e}=await Promise.all([n.e(5611),n.e(9421)]).then(n.bind(n,65611));return e}),rotate:i("rotate",async()=>{const e=await n.e(9678).then(n.bind(n,49678)),{default:t}=await n.e(5178).then(n.bind(n,85178));return(n,i,c,s)=>{const o=(new t).rotate(i,c,s);return a(e.execute((0,r.rS)(n),o))}}),centroid:i("centroid",async()=>{const e=await n.e(2931).then(n.bind(n,82931));return t=>a(e.execute((0,r.rS)(t)))}),labelPoint:i("labelPoint",async()=>{const e=await Promise.all([n.e(135),n.e(3903)]).then(n.bind(n,53903));return t=>a(e.execute((0,r.rS)(t)))}),simplify:i("simplify",()=>n.e(7979).then(n.bind(n,37979)).then(e=>e.execute)),isSelfIntersecting:i("isSelfIntersecting",async()=>{const{NonSimpleResult:e}=await Promise.resolve().then(n.bind(n,15273)),t=await n.e(7948).then(n.bind(n,27948)),i=new Set([5,6,7,10,11,12]);return n=>{const a=new e;return!t.isSimple((0,r.rS)(n),a)&&i.has(a.m_reason)}}),isSimple:i("isSimple",()=>n.e(7979).then(n.bind(n,37979)).then(e=>e.isSimple)),convexHull:i("convexHull",()=>n.e(6048).then(n.bind(n,56048)).then(e=>e.execute)),getNearestCoordinate:i("getNearestCoordinate",async()=>{const e=await n.e(554).then(n.bind(n,50554));return(t,n,i)=>{const c=e.getNearestCoordinate((0,r.rS)(t),(0,r.rS)(n),i);return{...c,coordinate:a(c.coordinate)}}}),getNearestVertex:i("getNearestVertex",async()=>{const e=await n.e(554).then(n.bind(n,50554));return(t,n)=>{const i=e.getNearestVertex((0,r.rS)(t),(0,r.rS)(n));return{...i,coordinate:a(i.coordinate)}}})};function s(e,t){const n=c[e];return n.loaded?n.execute.apply(void 0,t):n.load().then(()=>s(e,t))}}}]);
//# sourceMappingURL=9957.b14cc341.chunk.js.map