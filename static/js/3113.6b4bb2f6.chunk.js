"use strict";(self.webpackChunkn2_trees=self.webpackChunkn2_trees||[]).push([[3113],{97875:(t,e,n)=>{n.r(e),n.d(e,{queryUnitIdentifiers:()=>l});var s=n(3825),r=n(54994),o=n(6326),i=n(42553),a=n(46053),u=(n(81806),n(76460),n(47249),n(28379)),d=n(87990);let c=class extends i.o{constructor(t){super(t),this.container=null,this.ranges=null}readContainer(t,e){return{sourceId:e.sourceId,globalId:e.globalId}}readRanges(t,e){return[...e.gaps.map(t=>({firstUnit:t.start,numUnits:t.end-t.start+1,isGap:!0})),...e.unitIdentifiers.map(t=>({firstUnit:t.firstUnit,numUnits:t.numUnits,isGap:!1,content:{sourceId:t.sourceId,globalId:t.globalId}}))]}};async function l(t,e,n){const o=(0,r.Dl)(t),i=e.toJSON();e.objects&&(i.objects=JSON.stringify(e.objects));const a={...i,f:"json"},u=(0,r.lF)({...o.query,...a}),d=(0,r.jV)(u,{...n,method:"post"}),l=`${o.path}/unitIdentifiers/query`,{data:p}=await(0,s.A)(l,d);return p.objects.map(t=>c.fromJSON(t))}(0,o.Cg)([(0,a.MZ)({type:Object})],c.prototype,"container",void 0),(0,o.Cg)([(0,u.w)("container",["sourceId","globalId"])],c.prototype,"readContainer",null),(0,o.Cg)([(0,a.MZ)({type:[Object]})],c.prototype,"ranges",void 0),(0,o.Cg)([(0,u.w)("ranges",["gaps","unitIdentifiers"])],c.prototype,"readRanges",null),c=(0,o.Cg)([(0,d.$)("esri.rest.networks.unitIdentifiers.support.UnitQueryResult")],c)}}]);
//# sourceMappingURL=3113.6b4bb2f6.chunk.js.map