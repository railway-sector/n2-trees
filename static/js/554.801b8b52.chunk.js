"use strict";(self.webpackChunkn2_trees=self.webpackChunkn2_trees||[]).push([[554],{47663:(e,t,n)=>{n.d(t,{C:()=>o});var r=n(58067);function o(e,t){let n=arguments.length>2&&void 0!==arguments[2]&&arguments[2];const o=(0,r.toPoint)(e.m_coordinate,(0,r.getSpatialReference)(t)),i=e.m_distance,s=e.isEmpty(),a=e.m_bRightSide;return{coordinate:o,distance:i,isEmpty:s,...n&&{isRightSide:a},vertexIndex:e.m_vertexIndex}}},50554:(e,t,n)=>{n.r(t),n.d(t,{getNearestCoordinate:()=>r.g,getNearestVertex:()=>r.a,getNearestVertices:()=>r.b,supportsCurves:()=>r.s});n(78429),n(31633),n(58067),n(47663);var r=n(57074)},57074:(e,t,n)=>{n.d(t,{a:()=>u,b:()=>g,g:()=>c,p:()=>l,s:()=>m});var r=n(78429),o=n(31633),i=n(58067),s=n(47663);const a=new r.O;function c(e,t){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};const{calculateLeftRightSide:r=!1,testPolygonInterior:c=!0,unit:u}=n,g=a.getNearestCoordinate((0,i.fromGeometry)(e),(0,i.fromPoint)(t).getXY(),c,r);if(u&&g.m_distance){const t=(0,i.getSpatialReference)(e);g.m_distance=(0,o.PQ)(g.m_distance,t,u)}return(0,s.C)(g,e,r)}function u(e,t){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};const{unit:r}=n,c=a.getNearestVertex((0,i.fromGeometry)(e),(0,i.fromPoint)(t).getXY());if(r&&c.m_distance){const t=(0,i.getSpatialReference)(e);c.m_distance=(0,o.PQ)(c.m_distance,t,r)}return(0,s.C)(c,e)}function g(e,t,n,r){let c=arguments.length>4&&void 0!==arguments[4]?arguments[4]:{};const{unit:u}=c,g=(0,i.getSpatialReference)(e);return u&&n&&(n=(0,o.UW)(n,u,g)),a.getNearestVertices((0,i.fromGeometry)(e),(0,i.fromPoint)(t).getXY(),n,r).map(t=>(u&&t.m_distance&&(t.m_distance=(0,o.PQ)(t.m_distance,g,u)),(0,s.C)(t,e)))}const m=a.supportsCurves(),l=Object.freeze(Object.defineProperty({__proto__:null,getNearestCoordinate:c,getNearestVertex:u,getNearestVertices:g,supportsCurves:m},Symbol.toStringTag,{value:"Module"}))},78429:(e,t,n)=>{n.d(t,{O:()=>l});var r=n(97799),o=n(21557),i=n(26871),s=n(56175);function a(){return c(new i.P,-1,Number.NaN)}function c(e,t,n){return{m_coordinate:e.clone(),m_vertexIndex:t,m_geometryIndex:0,m_distance:n,m_bRightSide:!1,isEmpty:u}}function u(){return Number.isNaN(this.m_distance)}function g(e,t){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:-1,a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:-1;if(e.isEmpty())return 3;const c=e.getGeometryType();if((0,r.f)(c))return function(e,t,n,o){if(n>=0||o>=0)return(0,r.a)("");if(e.isDegenerate(0))return e.getStartXY().equals(t)?2:3;if(!e.isCurve()){const n=i.P.orientationRobust(t,e.getStartXY(),e.getEndXY());return n<0?1:n>0?0:2}const s=e.getClosestCoordinate(t,!1),a=e.getTangent(s),c=e.getCoord2D(s),u=i.P.orientationRobust(t,c,c.add(a));return u<0?1:u>0?0:2}(e,t,n,a);if(c===r.G.enumPolygon)return function(e,t,n,i){(n>=0||i>=0)&&(0,r.a)("");const a=new o.Envelope2D;e.queryEnvelope(a);const c=(0,s.H)(e,t,0);return 0===c?0:1===c?1:2}(e,t,n,a);if(c===r.G.enumPolyline)return function(e,t,n,o){(n<0&&o>=0||n>=0&&o<0)&&(0,r.a)("");const s=e.querySegmentIterator();if(n<0){let e=Number.MAX_VALUE,r=0;for(;s.nextPath();)for(;s.hasNextSegment();){const a=s.nextSegment(),c=a.getClosestCoordinate(t,!1),u=a.getCoord2D(c),g=i.P.sqrDistance(u,t);g<e?(r=1,n=s.getStartPointIndex(),o=s.getPathIndex(),e=g):g===e&&r++}if(0===r)return 3;if(1===r)return s.resetToVertex(n,o),g(s.nextSegment(),t)}const a=function(e,t,n,r){const o={i1:-1,i2:-1,bRight1:!1,bRight2:!1};if(o.i1=function(e,t,n){for(e.resetToVertex(t,n);e.hasNextSegment();)if(!e.nextSegment().isDegenerate(0))return e.getStartPointIndex();for(e.resetToVertex(t,n);e.hasPreviousSegment();)if(!e.previousSegment().isDegenerate(0))return e.getStartPointIndex();return-1}(t,n,r),-1!==o.i1){t.resetToVertex(o.i1,-1);const n=t.nextSegment(),r=n.getClosestCoordinate(e,!1),s=n.getCoord2D(r),a=i.P.sqrDistance(s,e);{const t=s.clone();t.subThis(n.getStartXY());const r=e.clone();r.subThis(n.getStartXY()),o.bRight1=t.crossProduct(r)<0}if(o.i2=function(e,t){for(e.resetToVertex(t,-1),e.nextSegment();e.hasNextSegment();)if(!e.nextSegment().isDegenerate(0))return e.getStartPointIndex();return-1}(t,o.i1),-1!==o.i2){t.resetToVertex(o.i2,-1);const n=t.nextSegment(),r=n.getClosestCoordinate(e,!1),s=n.getCoord2D(r);if(i.P.sqrDistance(s,e)>a)o.i2=-1;else{const t=s.clone();t.subThis(n.getStartXY());const r=e.clone();r.subThis(n.getStartXY()),o.bRight2=t.crossProduct(r)<0}}if(-1===o.i2&&(o.i2=function(e,t){for(e.resetToVertex(t,-1);e.hasPreviousSegment();)if(!e.previousSegment().isDegenerate(0))return e.getStartPointIndex();return-1}(t,o.i1),-1!==o.i2)){t.resetToVertex(o.i2,-1);const n=t.nextSegment(),r=n.getClosestCoordinate(e,!1),s=n.getCoord2D(r);if(i.P.sqrDistance(s,e)>a)o.i2=-1;else{const t=s.clone();t.subThis(n.getStartXY());const r=e.clone();r.subThis(n.getStartXY()),o.bRight2=t.crossProduct(r)<0;const i=o.i1;o.i1=o.i2,o.i2=i;const a=o.bRight1;o.bRight1=o.bRight2,o.bRight2=a}}}return o}(t,s,n,o);if(-1!==a.i1&&-1===a.i2)return a.bRight1?1:0;if(-1!==a.i1&&-1!==a.i2){if(a.bRight1===a.bRight2)return a.bRight1?1:0;{s.resetToVertex(a.i1,-1);const e=s.nextSegment().getTangent(1);s.resetToVertex(a.i2,-1);const t=s.nextSegment().getTangent(0);return e.crossProduct(t)>=0?1:0}}return s.resetToVertex(n,o),g(s.nextSegment(),t)}(e,t,n,a);if(c===r.G.enumEnvelope){const n=new o.Envelope2D;return e.queryEnvelope(n),n.contains(t)?n.containsExclusive(t)?1:2:0}return 3}var m=n(91523);class l{getOperatorType(){return 10500}accelerateGeometry(e,t,n){return!1}canAccelerateGeometry(e){return!1}supportsCurves(){return!0}getNearestCoordinate(e,t,n,o){if(t.isNAN()&&(0,r.a)("NAN xy coordinates are not allowed"),e.isEmpty())return a();switch(e.getGeometryType()){case r.G.enumPoint:return this.pointGetNearestVertex(e,t);case r.G.enumMultiPoint:return this.multiVertexGetNearestVertex(e,t);case r.G.enumPolyline:case r.G.enumPolygon:return this.multiPathGetNearestCoordinate(e,t,n,o);default:(0,r.t)("")}}getNearestVertex(e,t){if(t.isNAN()&&(0,r.a)("NAN xy coordinates are not allowed"),e.isEmpty())return a();switch(e.getGeometryType()){case r.G.enumPoint:return this.pointGetNearestVertex(e,t);case r.G.enumMultiPoint:case r.G.enumPolyline:case r.G.enumPolygon:return this.multiVertexGetNearestVertex(e,t);default:(0,r.t)("")}}getNearestVertices(e,t,n,o){if(0===o&&(0,r.a)(""),t.isNAN()&&(0,r.a)("NAN xy coordinates are not allowed"),e.isEmpty())return[];switch(e.getGeometryType()){case r.G.enumPoint:return this.pointGetNearestVertices(e,t,n,o);case r.G.enumMultiPoint:case r.G.enumPolyline:case r.G.enumPolygon:return this.multiVertexGetNearestVertices(e,t,n,o);default:(0,r.t)("")}}multiPathGetNearestCoordinate(e,t,n,a){if(e.getGeometryType()===r.G.enumPolygon&&n){const n=new o.Envelope2D;e.queryEnvelope(n);const r=(0,m.a)(null,n,!1);let i;if(i=(0,s.H)(e,t,a?0:r),0!==i){const e=c(t,-1,0);return a&&(e.m_bRightSide=!0),e}}const u=e.querySegmentIterator(),l=new i.P;let d=-1,f=-1,x=Number.MAX_VALUE,h=0;for(;u.nextPath();)for(;u.hasNextSegment();){const e=u.nextSegment(),n=e.getClosestCoordinate(t,!1),r=e.getCoord2D(n),o=i.P.sqrDistance(r,t);o<x?(h=1,l.assign(r),d=u.getStartPointIndex(),f=u.getPathIndex(),x=o):o===x&&h++}-1===d&&(0,r.a)("");const P=c(l,d,Math.sqrt(x));if(a)if(e.getGeometryType()!==r.G.enumPolygon){let n=!1;if(h>1){const r=g(e,t,d,f);n=0!==r&&3!==r}else{u.resetToVertex(d,f);n=0!==g(u.nextSegment(),t)}P.m_bRightSide=n}else n||0!==(0,s.H)(e,t,0)&&(P.m_bRightSide=!0);return P}pointGetNearestVertex(e,t){const n=e.getXY();return c(n,0,i.P.distance(n,t))}multiVertexGetNearestVertex(e,t){const n=e.getAttributeStreamRef(0),r=e.getPointCount();let o=-1;const s=new i.P;let a=Number.MAX_VALUE;const u=new i.P;for(let c=0;c<r;c++){n.queryPoint2D(2*c,u);const e=i.P.sqrDistance(u,t);e<a&&(s.assign(u),o=c,a=e)}return c(s,o,Math.sqrt(a))}pointGetNearestVertices(e,t,n,r){const o=[];if(0!==r){const r=n*n,s=e.getXY(),a=i.P.sqrDistance(s,t);a<=r&&o.push(c(s,0,Math.sqrt(a)))}return o}multiVertexGetNearestVertices(e,t,n,r){const o=[];if(0!==r){const s=e.getAttributeStreamRef(0),a=e.getPointCount();o.length=r+1;const u=n*n;for(let e=0;e<a;e++){const n=s.read(2*e),r=s.read(2*e+1),a=t.x-n,g=t.y-r,m=a*a+g*g;m<=u&&o.push(c(i.P.construct(n,r),e,Math.sqrt(m)))}o.sort((e,t)=>e.m_distance-t.m_distance)}return o.slice(0,r)}}}}]);
//# sourceMappingURL=554.801b8b52.chunk.js.map