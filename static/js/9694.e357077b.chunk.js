"use strict";(self.webpackChunkn2_trees=self.webpackChunkn2_trees||[]).push([[9694],{89694:(t,s,e)=>{e.r(s),e.d(s,{SplatSortWorkerInput:()=>r,SplatSortWorkerOutput:()=>n,destroy:()=>h,sort:()=>f});class r{constructor(t,s,e){let r=arguments.length>3&&void 0!==arguments[3]&&arguments[3];this.distances=t,this.sortOrderIndices=s,this.numGaussians=e,this.preciseSort=r}}class n{constructor(t,s){this.distances=t,this.sortedOrderIndices=s}}let o=null,l=null;const a=10,i=20,u=.25;function c(t,s){const e=t.length,r=Math.max(a,Math.min(i,Math.round(Math.log2(e/u)))),n=1+(1<<r);!function(t,s){o?.length!==t&&(o=new Uint32Array(t)),l&&l.length===1+(1<<s)?l.fill(0):l=new Uint32Array(1+(1<<s))}(e,r);let c=t[0],f=t[0];for(let o=0;o<t.length;o++)c=Math.min(c,t[o]),f=Math.max(f,t[o]);const h=f-c;if(h<1e-6)for(let a=0;a<e;++a)o[a]=0,l[0]++;else{const s=(1<<r)/h;for(let r=0;r<e;r++){const e=(t[r]-c)*s>>>0;o[r]=e,l[e]++}}for(let o=1;o<n;o++)l[o]+=l[o-1];for(let a=0;a<e;a++){const t=o[a];s[--l[t]]=a}}async function f(t){const{distances:s,sortOrderIndices:e,preciseSort:r,numGaussians:o}=t,l=s.subarray(0,o),a=e.subarray(0,o);if(0===l.length||0===a.length)return{result:new n(s,e),transferList:[s.buffer,e.buffer]};if(r){const t=Array.from(a.keys());t.sort((t,s)=>l[t]-l[s]||t-s);const s=t.map(t=>a[t]);a.set(s)}else c(l,a);return{result:new n(s,e),transferList:[s.buffer,e.buffer]}}function h(){o=null,l=null}}}]);
//# sourceMappingURL=9694.e357077b.chunk.js.map