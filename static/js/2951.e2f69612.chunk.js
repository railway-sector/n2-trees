"use strict";(self.webpackChunkn2_trees=self.webpackChunkn2_trees||[]).push([[2951],{82951:(e,t,r)=>{r.r(t),r.d(t,{default:()=>U});var i=r(6326),s=r(3825),a=r(50076),o=r(27741),n=r(77717),l=r(50346),p=r(31633),d=r(46053),h=r(40565),u=(r(81806),r(47249),r(28379)),c=r(87990),m=r(17707),y=r(49140),g=r(76797),v=r(68002),b=r(80963),f=r(25515),x=r(12406),M=r(36648),w=r(19502),S=r(65624),I=r(31362),C=r(11270),Z=r(94729),O=r(21617),P=r(5682),A=r(73907),T=r(78817),_=r(95363),F=r(1420),L=r(16852),j=r(50943),E=r(65419),R=r(38278),J=r(731),N=r(59187),k=r(67478);let q=class extends((0,S.dM)((0,T.e)((0,P.j)((0,A.I)((0,M.V)((0,w.b)((0,C.q)((0,Z.A)((0,n.P)((0,O.J)((0,x.p)((0,I.d)(f.A))))))))))))){constructor(){super(...arguments),this._exportImageParameters=new F.g({layer:this}),this.dateFieldsTimeZone=null,this.datesInUnknownTimezone=!1,this.dpi=96,this.elevationInfo=new J.A({mode:"on-the-ground"}),this.gdbVersion=null,this.imageFormat="png24",this.imageMaxHeight=2048,this.imageMaxWidth=2048,this.imageTransparency=!0,this.isReference=null,this.labelsVisible=!1,this.operationalLayerType="ArcGISMapServiceLayer",this.preferredTimeZone=null,this.sourceJSON=null,this.sublayers=null,this.type="map-image",this.url=null,this._debouncedSaveOperations=(0,l.sg)(async(e,t,i)=>{const{save:s,saveAs:a}=await r.e(6300).then(r.bind(r,56300));switch(e){case 0:return s(this,t);case 1:return a(this,i,t)}})}normalizeCtorArgs(e,t){return"string"==typeof e?{url:e,...t}:e}load(e){const t=null!=e?e.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Map Service"]},e).catch(l.QP).then(()=>this._fetchService(t))),Promise.resolve(this)}destroy(){this._exportImageParameters.destroy()}readImageFormat(e,t){const r=t.supportedImageFormatTypes;return r&&r.includes("PNG32")?"png32":"png24"}get loaded(){return super.loaded}set portalItem(e){super.portalItem=e}writeSublayers(e,t,r,i){if(!this.loaded||!e)return;const s=e.slice().reverse().flatten(e=>{let{sublayers:t}=e;return t&&t.toArray().reverse()}).toArray();let a=!1;const o=(0,y.aB)(i.origin);let n;if(this.capabilities?.operations.supportsExportMap&&this.capabilities?.exportMap?.supportsDynamicLayers)if(3===o){const e=this.createSublayersForOrigin("service").sublayers;a=(0,E.Zx)(s,e,2)}else if(o>3){const e=this.createSublayersForOrigin("portal-item");a=(0,E.Zx)(s,e.sublayers,(0,y.aB)(e.origin)),n=e.originWithPartialOverrides}const l=[],p={writeSublayerStructure:a,...i,minimumWritableOrigin:n};let d=a||this.hasVisibleLayersForOrigin(o);s.forEach(e=>{const t=e.write({},p);l.push(t),d=d||"user"===e.originOf("visible")}),l.some(e=>Object.keys(e).length>1)&&(t.layers=l),d&&(t.visibleLayers=s.filter(e=>e.visible).map(e=>e.id))}createExportImageParameters(e,t,r,i){const s=i?.pixelRatio||1;e&&this.version>=10&&(e=e.clone().shiftCentralMeridian()),this._exportImageParameters.floors=i?.floors??null,this._exportImageParameters.scale=i?.scale||(0,v.X_)({extent:e,width:t})*s;const a=this._exportImageParameters.toJSON(),o=!i?.rotation||this.version<10.3?{}:{rotation:-i.rotation},n=e?.spatialReference,l=(0,b.YX)(n);if(i?.scale&&e){const r=e.width/t*((0,p.GA)(e?.spatialReference)*p.dy);a.dpi=i.scale/r}a.dpi*=s;const d={};if(i?.timeExtent){const{start:e,end:t}=i.timeExtent.toJSON();d.time=e&&t&&e===t?""+e:`${e??"null"},${t??"null"}`}else this.timeInfo&&!this.timeInfo.hasLiveData&&(d.time="null,null");return{bbox:e?e.xmin+","+e.ymin+","+e.xmax+","+e.ymax:void 0,bboxSR:l,imageSR:l,size:t+","+r,...a,...o,...d}}async fetchImage(e,t,r,i){const{data:s}=await this._fetchImage("image",e,t,r,i);return s}async fetchImageBitmap(e,t,r,i){const{data:s,url:a}=await this._fetchImage("blob",e,t,r,i);return(0,L.m)(s,a,i?.signal)}async fetchRecomputedExtents(){const e={...arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},query:{returnUpdates:!0,f:"json",...this.customParameters,token:this.apiKey}},{data:t}=await(0,s.A)(this.url,e),{extent:r,fullExtent:i,timeExtent:a}=t,o=r||i;return{fullExtent:o&&g.A.fromJSON(o),timeExtent:a&&N.A.fromJSON({start:a[0],end:a[1]})}}loadAll(){return(0,o.g)(this,e=>{e(this.allSublayers),e(this.subtables)})}async save(e){return this._debouncedSaveOperations(0,e)}async saveAs(e,t){return this._debouncedSaveOperations(1,t,e)}serviceSupportsSpatialReference(e){return(0,R.D)(this,e)}async _fetchImage(e,t,r,i,o){const n={responseType:e,signal:o?.signal??null,query:{...this.parsedUrl.query,...this.createExportImageParameters(t,r,i,o),f:"image",...this.refreshParameters,...this.customParameters,token:this.apiKey}},p=this.parsedUrl.path+"/export";if(null!=n.query?.dynamicLayers&&!this.capabilities?.exportMap?.supportsDynamicLayers)throw new a.A("mapimagelayer:dynamiclayer-not-supported",`service ${this.url} doesn't support dynamic layers, which is required to be able to change the sublayer's order, rendering, labeling or source.`,{query:n.query});try{const{data:e}=await(0,s.A)(p,n);return{data:e,url:p}}catch(d){if((0,l.zf)(d))throw d;throw new a.A("mapimagelayer:image-fetch-error",`Unable to load image: ${p}`,{error:d})}}async _fetchService(e){if(this.sourceJSON)return void this.read(this.sourceJSON,{origin:"service",url:this.parsedUrl});const{data:t,ssl:r}=await(0,s.A)(this.parsedUrl.path,{query:{f:"json",...this.parsedUrl.query,...this.customParameters,token:this.apiKey},signal:e});r&&(this.url=this.url.replace(/^http:/i,"https:")),this.sourceJSON=t,this.read(t,{origin:"service",url:this.parsedUrl})}hasVisibleLayersForOrigin(e){return!(null==e||!this.sublayersSourceJSON[e]?.visibleLayers)}};(0,i.Cg)([(0,d.MZ)((0,k.P6)("dateFieldsTimeReference"))],q.prototype,"dateFieldsTimeZone",void 0),(0,i.Cg)([(0,d.MZ)({type:Boolean})],q.prototype,"datesInUnknownTimezone",void 0),(0,i.Cg)([(0,d.MZ)()],q.prototype,"dpi",void 0),(0,i.Cg)([(0,d.MZ)()],q.prototype,"elevationInfo",void 0),(0,i.Cg)([(0,d.MZ)()],q.prototype,"gdbVersion",void 0),(0,i.Cg)([(0,d.MZ)()],q.prototype,"imageFormat",void 0),(0,i.Cg)([(0,u.w)("imageFormat",["supportedImageFormatTypes"])],q.prototype,"readImageFormat",null),(0,i.Cg)([(0,d.MZ)({json:{origins:{service:{read:{source:"maxImageHeight"}}}}})],q.prototype,"imageMaxHeight",void 0),(0,i.Cg)([(0,d.MZ)({json:{origins:{service:{read:{source:"maxImageWidth"}}}}})],q.prototype,"imageMaxWidth",void 0),(0,i.Cg)([(0,d.MZ)()],q.prototype,"imageTransparency",void 0),(0,i.Cg)([(0,d.MZ)({type:Boolean,json:{read:!1,write:{enabled:!0,overridePolicy:()=>({enabled:!1})}}})],q.prototype,"isReference",void 0),(0,i.Cg)([(0,d.MZ)({json:{read:!1,write:!1}})],q.prototype,"labelsVisible",void 0),(0,i.Cg)([(0,d.MZ)({type:["ArcGISMapServiceLayer"]})],q.prototype,"operationalLayerType",void 0),(0,i.Cg)([(0,d.MZ)({json:{read:!1,write:!1}})],q.prototype,"popupEnabled",void 0),(0,i.Cg)([(0,d.MZ)((0,k.P6)("preferredTimeReference"))],q.prototype,"preferredTimeZone",void 0),(0,i.Cg)([(0,d.MZ)()],q.prototype,"sourceJSON",void 0),(0,i.Cg)([(0,d.MZ)({json:{write:{ignoreOrigin:!0}}})],q.prototype,"sublayers",void 0),(0,i.Cg)([(0,m.K)("sublayers",{layers:{type:[j.A]},visibleLayers:{type:[h.jz]}})],q.prototype,"writeSublayers",null),(0,i.Cg)([(0,d.MZ)({type:["show","hide","hide-children"],json:{origins:{"portal-item":{read:!1,write:!1}}}})],q.prototype,"listMode",void 0),(0,i.Cg)([(0,d.MZ)({json:{read:!1},readOnly:!0,value:"map-image"})],q.prototype,"type",void 0),(0,i.Cg)([(0,d.MZ)(_.OZ)],q.prototype,"url",void 0),q=(0,i.Cg)([(0,c.$)("esri.layers.MapImageLayer")],q);const U=q}}]);
//# sourceMappingURL=2951.e2f69612.chunk.js.map