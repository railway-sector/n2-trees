"use strict";(self.webpackChunkn2_trees=self.webpackChunkn2_trees||[]).push([[2551],{52551:(e,t,o)=>{o.r(t),o.d(t,{default:()=>R});var r=o(6326),i=o(86560),s=o(3825),l=o(77717),n=o(50346),a=o(90534),y=o(46053),p=(o(81806),o(76460),o(47249),o(28379)),u=o(87990),d=o(76797),h=o(80963),c=o(25515),g=o(65624),S=o(11270),m=o(94729),C=o(21617),v=o(5682),f=o(95363),M=o(27410),b=o(86875),A=o(7246),Z=o(76940),k=o(25900);const w=["atom","xml"],G={base:k.A,key:"type",typeMap:{"simple-line":A.A},errorContext:"symbol"},P={base:k.A,key:"type",typeMap:{"picture-marker":M.A,"simple-marker":Z.A},errorContext:"symbol"},_={base:k.A,key:"type",typeMap:{"simple-fill":b.A},errorContext:"symbol"};let x=class extends((0,g.dM)((0,C.J)((0,S.q)((0,m.A)((0,v.j)((0,l.P)(c.A))))))){constructor(){super(...arguments),this.description=null,this.fullExtent=null,this.legendEnabled=!0,this.lineSymbol=null,this.pointSymbol=null,this.polygonSymbol=null,this.operationalLayerType="GeoRSS",this.url=null,this.type="geo-rss"}normalizeCtorArgs(e,t){return"string"==typeof e?{url:e,...t}:e}readFeatureCollections(e,t){return t.featureCollection.layers.forEach(e=>{const t=e.layerDefinition.drawingInfo.renderer.symbol;t&&"esriSFS"===t.type&&t.outline?.style.includes("esriSFS")&&(t.outline.style="esriSLSSolid")}),t.featureCollection.layers}get hasPoints(){return this._hasGeometry("esriGeometryPoint")}get hasPolylines(){return this._hasGeometry("esriGeometryPolyline")}get hasPolygons(){return this._hasGeometry("esriGeometryPolygon")}get title(){const e=this._get("title");return e&&"defaults"!==this.originOf("title")?e:this.url?(0,a.e7)(this.url,w)||"GeoRSS":e}set title(e){this._set("title",e)}load(e){const t=null!=e?e.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Map Service","Feature Service","Feature Collection","Scene Service"]},e).catch(n.QP).then(()=>this._fetchService(t)).then(e=>{this.read(e,{origin:"service"})})),Promise.resolve(this)}async hasDataChanged(){const e=await this._fetchService();return this.read(e,{origin:"service",ignoreDefaults:!0}),!0}async _fetchService(e){const t=this.spatialReference,{data:o}=await(0,s.A)(i.A.geoRSSServiceUrl,{query:{url:this.url,refresh:!!this.loaded||void 0,outSR:(0,h.oT)(t)?void 0:t.wkid??JSON.stringify(t)},signal:e});return o}_hasGeometry(e){return this.featureCollections?.some(t=>t.featureSet?.geometryType===e&&t.featureSet.features?.length>0)??!1}};(0,r.Cg)([(0,y.MZ)()],x.prototype,"description",void 0),(0,r.Cg)([(0,y.MZ)()],x.prototype,"featureCollections",void 0),(0,r.Cg)([(0,p.w)("service","featureCollections",["featureCollection.layers"])],x.prototype,"readFeatureCollections",null),(0,r.Cg)([(0,y.MZ)({type:d.A,json:{name:"lookAtExtent"}})],x.prototype,"fullExtent",void 0),(0,r.Cg)([(0,y.MZ)(f.id)],x.prototype,"id",void 0),(0,r.Cg)([(0,y.MZ)(f.fV)],x.prototype,"legendEnabled",void 0),(0,r.Cg)([(0,y.MZ)({types:G,json:{write:!0}})],x.prototype,"lineSymbol",void 0),(0,r.Cg)([(0,y.MZ)({type:["show","hide"]})],x.prototype,"listMode",void 0),(0,r.Cg)([(0,y.MZ)({types:P,json:{write:!0}})],x.prototype,"pointSymbol",void 0),(0,r.Cg)([(0,y.MZ)({types:_,json:{write:!0}})],x.prototype,"polygonSymbol",void 0),(0,r.Cg)([(0,y.MZ)({type:["GeoRSS"]})],x.prototype,"operationalLayerType",void 0),(0,r.Cg)([(0,y.MZ)(f.OZ)],x.prototype,"url",void 0),(0,r.Cg)([(0,y.MZ)({json:{origins:{service:{read:{source:"name",reader:e=>e||void 0}}}}})],x.prototype,"title",null),(0,r.Cg)([(0,y.MZ)({readOnly:!0,json:{read:!1},value:"geo-rss"})],x.prototype,"type",void 0),x=(0,r.Cg)([(0,u.$)("esri.layers.GeoRSSLayer")],x);const R=x}}]);
//# sourceMappingURL=2551.1806b6cd.chunk.js.map