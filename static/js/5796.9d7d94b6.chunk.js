"use strict";(self.webpackChunkn2_trees=self.webpackChunkn2_trees||[]).push([[5796],{8141:(t,e,s)=>{s.d(e,{z:()=>i});class i{constructor(){let t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null,e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,s=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null;this.minValue=t,this.maxValue=e,this.noDataValue=s}}},66486:(t,e,s)=>{s.d(e,{A:()=>g});var i,l=s(6326),n=s(50076),r=s(42553),a=s(53084),o=s(76460),h=s(46053),p=s(21403),u=s(87990),c=s(8141),f=s(52297);let g=i=class extends r.o{static createEmptyBand(t,e){return new(i.getPixelArrayConstructor(t))(e)}static combineBandMasks(t){if(t.length<2)return t[0];const e=t[0].length,s=new Uint8Array(e).fill(255);for(let i=0;i<t.length;i++){const l=t[i];for(let t=0;t<e;t++)l[t]||(s[t]=0)}return s}static getPixelArrayConstructor(t){let e;switch(t){case"u1":case"u2":case"u4":case"u8":e=Uint8Array;break;case"u16":e=Uint16Array;break;case"u32":e=Uint32Array;break;case"s8":e=Int8Array;break;case"s16":e=Int16Array;break;case"s32":e=Int32Array;break;case"f32":case"c64":case"c128":case"unknown":e=Float32Array;break;case"f64":e=Float64Array}return e}constructor(t){super(t),this.width=null,this.height=null,this.pixelType="f32",this.validPixelCount=null,this.mask=null,this.maskIsAlpha=!1,this.premultiplyAlpha=!1,this.statistics=null,this.depthCount=1}castPixelType(t){if(!t)return"f32";let e=t.toLowerCase();return["u1","u2","u4"].includes(e)?e="u8":["unknown","u8","s8","u16","s16","u32","s32","f32","f64"].includes(e)||(e="f32"),e}getPlaneCount(){return this.pixels?.length}addData(t){if(!t.pixels||t.pixels.length!==this.width*this.height)throw new n.A("pixelblock:invalid-or-missing-pixels","add data requires valid pixels array that has same length defined by pixel block width * height");this.pixels||(this.pixels=[]),this.statistics||(this.statistics=[]),this.pixels.push(t.pixels),this.statistics.push(t.statistics??new c.z)}getAsRGBA(){const t=new ArrayBuffer(this.width*this.height*4);switch(this.pixelType){case"s8":case"s16":case"u16":case"s32":case"u32":case"f32":case"f64":this._fillFromNon8Bit(t);break;default:this._fillFrom8Bit(t)}return new Uint8ClampedArray(t)}getAsRGBAFloat(){const t=new Float32Array(this.width*this.height*4);return this._fillFrom32Bit(t),t}updateStatistics(){if(!this.pixels)return;this.statistics=this.pixels.map(t=>function(t,e){let s=1/0,i=-1/0;const l=t.length;let n,r=0;if(null!=e)for(n=0;n<l;n++)e[n]&&(r=t[n],s=r<s?r:s,i=r>i?r:i);else for(n=0;n<l;n++)r=t[n],s=r<s?r:s,i=r>i?r:i;return new c.z(s,i)}(t,this.mask));const t=this.mask;let e=0;if(null!=t)for(let s=0;s<t.length;s++)t[s]&&e++;else e=this.width*this.height;this.validPixelCount=e}clamp(t){if(!t||"f64"===t||"f32"===t||!this.pixels)return;const[e,s]=(0,f.hP)(t),l=this.pixels,n=this.width*this.height,r=l.length;let a,o,h;const p=[];for(let u=0;u<r;u++){h=i.createEmptyBand(t,n),a=l[u];for(let t=0;t<n;t++)o=a[t],h[t]=o>s?s:o<e?e:o;p.push(h)}this.pixels=p,this.pixelType=t}extractBands(t){const{pixels:e,statistics:s}=this;if(null==t||0===t.length||!e||0===e.length)return this;const l=e.length,n=t.some(t=>t>=e.length),r=l===t.length&&!t.some((t,e)=>t!==e);if(n||r)return this;const a=this.bandMasks?.length===l?t.map(t=>this.bandMasks[t]):void 0;let{mask:o,validPixelCount:h}=this;const{width:p,height:u}=this;return a?.length&&(o=i.combineBandMasks(a),h=o.filter(t=>!!t).length),new i({pixelType:this.pixelType,width:p,height:u,mask:o,bandMasks:a,validPixelCount:h,maskIsAlpha:this.maskIsAlpha,pixels:t.map(t=>e[t]),statistics:s&&t.map(t=>s[t])})}clone(){const t=new i({width:this.width,height:this.height,pixelType:this.pixelType,maskIsAlpha:this.maskIsAlpha,validPixelCount:this.validPixelCount,premultiplyAlpha:this.premultiplyAlpha,depthCount:this.depthCount});let e;null!=this.mask&&(t.mask=new Uint8Array(this.mask)),this.noDataValues&&(t.noDataValues=[...this.noDataValues]),this.bandMasks&&(t.bandMasks=this.bandMasks.map(t=>new Uint8Array(t)));const s=i.getPixelArrayConstructor(this.pixelType);if(this.pixels&&this.pixels.length>0){t.pixels=[];const i=!!this.pixels[0].slice;for(e=0;e<this.pixels.length;e++)t.pixels[e]=i?this.pixels[e].slice():new s(this.pixels[e])}if(this.statistics)for(t.statistics=[],e=0;e<this.statistics.length;e++)t.statistics[e]=(0,a.o8)(this.statistics[e]);return t}getTransferableObject(){const{pixels:t,bandMasks:e,mask:s}=this;this.pixels=[],this.bandMasks=void 0,this.mask=void 0;const i=this.toJSON();this.pixels=t,this.bandMasks=e,this.mask=s,i.pixels=t?[...t]:t,i.bandMasks=e?[...e]:e,i.mask=s;const l=[];return[...t??[],s,...e??[]].filter(t=>null!=t&&ArrayBuffer.isView(t)).forEach(t=>{t&&!l.includes(t.buffer)&&l.push(t.buffer)}),{pixelBlock:i,transferList:l}}_fillFrom8Bit(t){const{mask:e,maskIsAlpha:s,premultiplyAlpha:i,pixels:l}=this;if(!t||!l?.length)return void o.A.getLogger(this).error("getAsRGBA()","Unable to convert to RGBA. The input pixel block is empty.");let n,r,a,h;n=r=a=l[0],l.length>=3?(r=l[1],a=l[2]):2===l.length&&(r=l[1]);const p=new Uint32Array(t),u=this.width*this.height;if(n.length===u)if(null!=e&&e.length===u)if(s)for(h=0;h<u;h++){const t=e[h];if(t){const e=t/255;p[h]=i?t<<24|a[h]*e<<16|r[h]*e<<8|n[h]*e:t<<24|a[h]<<16|r[h]<<8|n[h]}}else for(h=0;h<u;h++)e[h]&&(p[h]=255<<24|a[h]<<16|r[h]<<8|n[h]);else for(h=0;h<u;h++)p[h]=255<<24|a[h]<<16|r[h]<<8|n[h];else o.A.getLogger(this).error("getAsRGBA()","Unable to convert to RGBA. The pixelblock is invalid.")}_fillFromNon8Bit(t){const{pixels:e,mask:s,statistics:i}=this;if(!t||!e?.length)return void o.A.getLogger(this).error("getAsRGBA()","Unable to convert to RGBA. The input pixel block is empty.");const l=this.pixelType;let n=1,r=0,a=1;if(i&&i.length>0){for(const t of i)if(null!=t.minValue&&(r=Math.min(r,t.minValue)),null!=t.maxValue&&null!=t.minValue){const e=t.maxValue-t.minValue;a=Math.max(a,e)}n=255/a}else{let t=255;"s8"===l?(r=-128,t=127):"u16"===l?t=65535:"s16"===l?(r=-32768,t=32767):"u32"===l?t=4294967295:"s32"===l?(r=-2147483648,t=2147483647):"f32"===l?(r=-34e38,t=34e38):"f64"===l&&(r=-Number.MAX_VALUE,t=Number.MAX_VALUE),n=255/(t-r)}const h=new Uint32Array(t),p=this.width*this.height;let u,c,f,g,d;if(u=c=f=e[0],u.length!==p)return o.A.getLogger(this).error("getAsRGBA()","Unable to convert to RGBA. The pixelblock is invalid.");if(e.length>=2)if(c=e[1],e.length>=3&&(f=e[2]),null!=s&&s.length===p)for(g=0;g<p;g++)s[g]&&(h[g]=255<<24|(f[g]-r)*n<<16|(c[g]-r)*n<<8|(u[g]-r)*n);else for(g=0;g<p;g++)h[g]=255<<24|(f[g]-r)*n<<16|(c[g]-r)*n<<8|(u[g]-r)*n;else if(null!=s&&s.length===p)for(g=0;g<p;g++)d=(u[g]-r)*n,s[g]&&(h[g]=255<<24|d<<16|d<<8|d);else for(g=0;g<p;g++)d=(u[g]-r)*n,h[g]=255<<24|d<<16|d<<8|d}_fillFrom32Bit(t){const{pixels:e,mask:s}=this;if(!t||!e?.length)return o.A.getLogger(this).error("getAsRGBAFloat()","Unable to convert to RGBA. The input pixel block is empty.");let i,l,n,r;i=l=n=e[0],e.length>=3?(l=e[1],n=e[2]):2===e.length&&(l=e[1]);const a=this.width*this.height;if(i.length!==a)return o.A.getLogger(this).error("getAsRGBAFloat()","Unable to convert to RGBA. The pixelblock is invalid.");let h=0;if(null!=s&&s.length===a)for(r=0;r<a;r++)t[h++]=i[r],t[h++]=l[r],t[h++]=n[r],t[h++]=1&s[r];else for(r=0;r<a;r++)t[h++]=i[r],t[h++]=l[r],t[h++]=n[r],t[h++]=1}};(0,l.Cg)([(0,h.MZ)({json:{write:!0}})],g.prototype,"width",void 0),(0,l.Cg)([(0,h.MZ)({json:{write:!0}})],g.prototype,"height",void 0),(0,l.Cg)([(0,h.MZ)({json:{write:!0}})],g.prototype,"pixelType",void 0),(0,l.Cg)([(0,p.w)("pixelType")],g.prototype,"castPixelType",null),(0,l.Cg)([(0,h.MZ)({json:{write:!0}})],g.prototype,"validPixelCount",void 0),(0,l.Cg)([(0,h.MZ)({json:{write:!0}})],g.prototype,"mask",void 0),(0,l.Cg)([(0,h.MZ)({json:{write:!0}})],g.prototype,"maskIsAlpha",void 0),(0,l.Cg)([(0,h.MZ)({json:{write:!0}})],g.prototype,"pixels",void 0),(0,l.Cg)([(0,h.MZ)()],g.prototype,"premultiplyAlpha",void 0),(0,l.Cg)([(0,h.MZ)({json:{write:!0}})],g.prototype,"statistics",void 0),(0,l.Cg)([(0,h.MZ)({json:{write:!0}})],g.prototype,"depthCount",void 0),(0,l.Cg)([(0,h.MZ)({json:{write:!0}})],g.prototype,"noDataValues",void 0),(0,l.Cg)([(0,h.MZ)({json:{write:!0}})],g.prototype,"bandMasks",void 0),g=i=(0,l.Cg)([(0,u.$)("esri.layers.support.PixelBlock")],g)},95796:(t,e,s)=>{s.r(e),s.d(e,{convertPixelBlockToImageData:()=>r,getFacesWithVertexAttributes:()=>n,recomputePositions:()=>a});var i=s(15941),l=s(66486);function n(t){let{distance:e,yaw:s,horizontalFieldOfView:l,pitch:n,verticalFieldOfView:r,origin:a=[0,0,0],positionLength:o=25}=t;const h=o-1,p=o*o,u=new Float32Array(2*p),c=new Float64Array(3*p),f=new Float32Array(3*p).fill(0),g=new Uint32Array(h**2*6);for(let d=0,A=0;d<p;d++){const t=Math.floor(d/o),p=d%o,x=1-p/h,m=t/h,y=2*d,k=3*d;u[y]=x,u[y+1]=m;const w=n+r/2-m*r,b=(0,i.kU)(s-l/2+x*l),v=(0,i.kU)(w),M=Math.sin(v),C=Math.cos(v),B=[M*Math.sin(b),Math.cos(b)*M,-C];c[k]=a[0]+e*B[0],c[k+1]=a[1]+e*B[1],c[k+2]=a[2]+e*B[2],f[k]=-B[0],f[k+1]=-B[1],f[k+2]=-B[2],t!==h&&p!==h&&(g[A++]=d,g[A++]=d+o,g[A++]=d+o+1,g[A++]=d,g[A++]=d+o+1,g[A++]=d+1)}return{result:{position:c,uv:u,normal:f,faces:g},transferList:[c.buffer,u.buffer,f.buffer,g?.buffer]}}function r(t){const e=l.A.fromJSON(t);e.premultiplyAlpha=!0;const s=e.getAsRGBA(),i=e.width,n=e.height,r=new ImageData(s,i,n);return{result:r,transferList:[r.data.buffer]}}function a(t){let{oldDistance:e,newDistance:s,position:i,origin:l=[0,0,0]}=t;const n=i.length/3;for(let r=0;r<n;r+=3){const t=3*r;i[t]=l[0]+(i[t]-l[0])*(s/e),i[t+1]=l[1]+(i[t+1]-l[1])*(s/e),i[t+2]=l[2]+(i[t+2]-l[2])*(s/e)}return{result:i,transferList:[i.buffer]}}}}]);
//# sourceMappingURL=5796.9d7d94b6.chunk.js.map